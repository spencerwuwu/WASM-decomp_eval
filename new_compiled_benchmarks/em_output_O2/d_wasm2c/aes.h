/* Automatically generated by wasm2c */
#ifndef AES_H_GENERATED_
#define AES_H_GENERATED_

#include <stdint.h>

#include "wasm-rt.h"

#if defined(WASM_RT_ENABLE_SIMD)
#include "simde/wasm/simd128.h"
#endif

/* TODO(binji): only use stdint.h types in header */
#ifndef WASM_RT_CORE_TYPES_DEFINED
#define WASM_RT_CORE_TYPES_DEFINED
typedef uint8_t u8;
typedef int8_t s8;
typedef uint16_t u16;
typedef int16_t s16;
typedef uint32_t u32;
typedef int32_t s32;
typedef uint64_t u64;
typedef int64_t s64;
typedef float f32;
typedef double f64;

#if defined(WASM_RT_ENABLE_SIMD)
typedef simde_v128_t v128;
#endif

#endif

#ifdef __cplusplus
extern "C" {
#endif

struct w2c_GOT0x2Emem;
struct w2c_env;
extern u32* w2c_GOT0x2Emem_Rcon0(struct w2c_GOT0x2Emem*);
extern u32* w2c_GOT0x2Emem_Sbox(struct w2c_GOT0x2Emem*);
extern u32* w2c_GOT0x2Emem_endTimer(struct w2c_GOT0x2Emem*);
extern u32* w2c_GOT0x2Emem_invSbox(struct w2c_GOT0x2Emem*);
extern u32* w2c_GOT0x2Emem_key(struct w2c_GOT0x2Emem*);
extern u32* w2c_GOT0x2Emem_main_result(struct w2c_GOT0x2Emem*);
extern u32* w2c_GOT0x2Emem_nb(struct w2c_GOT0x2Emem*);
extern u32* w2c_GOT0x2Emem_round_val(struct w2c_GOT0x2Emem*);
extern u32* w2c_GOT0x2Emem_startTimer(struct w2c_GOT0x2Emem*);
extern u32* w2c_GOT0x2Emem_statemt(struct w2c_GOT0x2Emem*);
extern u32* w2c_GOT0x2Emem_word(struct w2c_GOT0x2Emem*);
extern u32* w2c_env_0x5F_memory_base(struct w2c_env*);
extern u32* w2c_env_0x5F_stack_pointer(struct w2c_env*);
extern wasm_rt_memory_t* w2c_env_memory(struct w2c_env*);

typedef struct w2c_aes {
  struct w2c_env* w2c_env_instance;
  /* import: 'GOT.mem' 'Rcon0' */
  u32 *w2c_GOT0x2Emem_Rcon0;
  /* import: 'GOT.mem' 'Sbox' */
  u32 *w2c_GOT0x2Emem_Sbox;
  /* import: 'GOT.mem' 'endTimer' */
  u32 *w2c_GOT0x2Emem_endTimer;
  /* import: 'GOT.mem' 'invSbox' */
  u32 *w2c_GOT0x2Emem_invSbox;
  /* import: 'GOT.mem' 'key' */
  u32 *w2c_GOT0x2Emem_key;
  /* import: 'GOT.mem' 'main_result' */
  u32 *w2c_GOT0x2Emem_main_result;
  /* import: 'GOT.mem' 'nb' */
  u32 *w2c_GOT0x2Emem_nb;
  /* import: 'GOT.mem' 'round_val' */
  u32 *w2c_GOT0x2Emem_round_val;
  /* import: 'GOT.mem' 'startTimer' */
  u32 *w2c_GOT0x2Emem_startTimer;
  /* import: 'GOT.mem' 'statemt' */
  u32 *w2c_GOT0x2Emem_statemt;
  /* import: 'GOT.mem' 'word' */
  u32 *w2c_GOT0x2Emem_word;
  /* import: 'env' '__memory_base' */
  u32 *w2c_env_0x5F_memory_base;
  /* import: 'env' '__stack_pointer' */
  u32 *w2c_env_0x5F_stack_pointer;
  /* import: 'env' 'memory' */
  wasm_rt_memory_t *w2c_env_memory;
  u32 w2c_nb_1;
  u32 w2c_round_val_1;
  u32 w2c_word_1;
  u32 w2c_main_result_1;
  u32 w2c_Sbox_1;
  u32 w2c_Rcon0_1;
  u32 w2c_invSbox_1;
  u32 w2c_statemt_1;
  u32 w2c_key_1;
  u32 w2c_startTimer_1;
  u32 w2c_endTimer_1;
  u32 w2c_type;
} w2c_aes;

void wasm2c_aes_instantiate(w2c_aes*, struct w2c_GOT0x2Emem*, struct w2c_env*);
void wasm2c_aes_free(w2c_aes*);
wasm_rt_func_type_t wasm2c_aes_get_func_type(uint32_t param_count, uint32_t result_count, ...);

/* import: 'env' '__small_printf' */
u32 w2c_env_0x5F_small_printf(struct w2c_env*, u32, u32);

/* import: 'env' 'gettimeofday' */
u32 w2c_env_gettimeofday(struct w2c_env*, u32, u32);

/* import: 'env' 'iprintf' */
u32 w2c_env_iprintf(struct w2c_env*, u32, u32);

extern const u32 wasm2c_aes_min_env_memory;
extern const u32 wasm2c_aes_max_env_memory;

/* export: '__wasm_call_ctors' */
void w2c_aes_0x5F_wasm_call_ctors(w2c_aes*);

/* export: '__wasm_apply_data_relocs' */
void w2c_aes_0x5F_wasm_apply_data_relocs(w2c_aes*);

/* export: 'encrypt' */
u32 w2c_aes_encrypt(w2c_aes*, u32, u32, u32);

/* export: 'KeySchedule' */
u32 w2c_aes_KeySchedule(w2c_aes*, u32, u32);

/* export: 'nb' */
u32* w2c_aes_nb(w2c_aes* instance);

/* export: 'round_val' */
u32* w2c_aes_round_val(w2c_aes* instance);

/* export: 'word' */
u32* w2c_aes_word(w2c_aes* instance);

/* export: 'ByteSub_ShiftRow' */
void w2c_aes_ByteSub_ShiftRow(w2c_aes*, u32, u32);

/* export: 'MixColumn_AddRoundKey' */
u32 w2c_aes_MixColumn_AddRoundKey(w2c_aes*, u32, u32, u32);

/* export: 'main_result' */
u32* w2c_aes_main_result(w2c_aes* instance);

/* export: 'Sbox' */
u32* w2c_aes_Sbox(w2c_aes* instance);

/* export: 'Rcon0' */
u32* w2c_aes_Rcon0(w2c_aes* instance);

/* export: 'AddRoundKey' */
u32 w2c_aes_AddRoundKey(w2c_aes*, u32, u32, u32);

/* export: 'decrypt' */
u32 w2c_aes_decrypt(w2c_aes*, u32, u32, u32);

/* export: 'InversShiftRow_ByteSub' */
void w2c_aes_InversShiftRow_ByteSub(w2c_aes*, u32, u32);

/* export: 'AddRoundKey_InversMixColumn' */
u32 w2c_aes_AddRoundKey_InversMixColumn(w2c_aes*, u32, u32, u32);

/* export: 'invSbox' */
u32* w2c_aes_invSbox(w2c_aes* instance);

/* export: 'SubByte' */
u32 w2c_aes_SubByte(w2c_aes*, u32);

/* export: 'aes_main' */
u32 w2c_aes_aes_main(w2c_aes*);

/* export: 'statemt' */
u32* w2c_aes_statemt(w2c_aes* instance);

/* export: 'key' */
u32* w2c_aes_key(w2c_aes* instance);

/* export: 'submain' */
u32 w2c_aes_submain(w2c_aes*);

/* export: 'startTimer' */
u32* w2c_aes_startTimer(w2c_aes* instance);

/* export: 'endTimer' */
u32* w2c_aes_endTimer(w2c_aes* instance);

/* export: 'type' */
u32* w2c_aes_type(w2c_aes* instance);

#ifdef __cplusplus
}
#endif

#endif  /* AES_H_GENERATED_ */
