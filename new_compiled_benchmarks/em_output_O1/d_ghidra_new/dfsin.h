void shift64RightJamming(ulong param_1,int param_2,ulong *param_3)  ;
void shift64ExtraRightJamming(ulong param_1,ulong param_2,int param_3,ulong *param_4,ulong *param_5)  ;
void add128(long param_1,ulong param_2,long param_3,ulong param_4,long *param_5,long *param_6)  ;
void sub128(long param_1,ulong param_2,long param_3,ulong param_4,long *param_5,long *param_6)  ;
void mul64To128(ulong param_1,ulong param_2,long *param_3,ulong *param_4)  ;
void float_raise(uint param_1)  ;
int float64_is_nan(long param_1)  ;
int float64_is_signaling_nan(ulong param_1)  ;
ulong extractFloat64Frac(ulong param_1)  ;
uint extractFloat64Exp(int8 param_1)  ;
ulong extractFloat64Sign(ulong param_1)  ;
void normalizeFloat64Subnormal(ulong param_1,int *param_2,long *param_3)  ;
long packFloat64(long param_1,long param_2,long param_3)  ;
long roundAndPackFloat64(ulong param_1,long param_2,ulong param_3)  ;
void normalizeRoundAndPackFloat64(int8 param_1,int param_2,ulong param_3)  ;
long int32_to_float64(uint param_1)  ;
ulong addFloat64Sigs(ulong param_1,ulong param_2,ulong param_3)  ;
ulong subFloat64Sigs(ulong param_1,ulong param_2,uint param_3)  ;
void float64_add(int8 param_1,int8 param_2)  ;
ulong float64_mul(ulong param_1,ulong param_2)  ;
ulong float64_div(ulong param_1,ulong param_2)  ;
byte float64_le(ulong param_1,ulong param_2)  ;
byte float64_ge(ulong param_1,ulong param_2)  ;
ulong float64_neg(ulong param_1)  ;
ulong float64_abs(ulong param_1)  ;
ulong local_sin(ulong param_1)  ;
void ullong_to_double(void)  ;
unsigned int puRam0000000000100117, _DAT_ff831174ff85398b, DAT_483fe0c148090a80, DAT_c9314503eb040980, DAT_c148c2014c010980, DAT_49c0ff4810088041, DAT_c68948c6eb100880, _DAT_ffffffffffffb948, DAT_49c0ff4810088041, DAT_49c0ff4810088041, DAT_c35bc8ff48100980, DAT_b848100880, DAT_49c0ff4810088041, _DAT_104840f118b, DAT_c0b60fc031100880, DAT_c0b60fc031100880, DAT_8348f0894c100880;
